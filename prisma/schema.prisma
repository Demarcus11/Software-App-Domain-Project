// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma generate after updating schema, npx prisma migrate dev --name init to regenerate db

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  MANAGER
  USER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}

enum AccountCategory {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}


enum AccountSubcategory {
  CURRENT_ASSETS
  FIXED_ASSETS
  CURRENT_LIABILITIES
  LONG_TERM_LIABILITIES
  RETAINED_EARNINGS
  OPERATING_REVENUE
  OPERATING_EXPENSE
}

enum StatementType {
  IS // Income Statement
  BS // Balance Sheet
  RE // Retained Earnings Statement
}

model User {
  id                        Int       @id @default(autoincrement())
  username                  String    @unique
  email                     String    @unique
  firstName                 String
  lastName                  String
  dateOfHire                DateTime  @default(now())
  hiredBy                   User?     @relation("HiredByUser", fields: [hiredById], references: [id])
  hiredById                 Int?
  isActive                  Boolean   @default(false)
  role                      Roles
  address                   String
  dateOfBirth               DateTime
  password                  String
  passwordResetToken        String?    @unique
  passwordResetTokenExpiry  DateTime?
  failedLoginAttempts       Int        @default(0)
  isSuspended               Boolean    @default(false)
  suspensionStart           DateTime?
  suspensionEnd             DateTime?
  lastPasswordChangeAt      DateTime   @default(now())
  passwordExpiresAt         DateTime

  // Relationships
  securityQuestions         UserSecurityQuestion[]
  passwordHistory           PasswordHistory[]
  accessRequests            AccessRequest[]
  accounts                  Account[] // Relationship to accounts created by the user
  eventLogs                 EventLog[] // Relationship to event logs created by the user
  Transaction               Transaction[]

  user User[] @relation("HiredByUser")

  @@map("users")
}

model Account {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  number            String          @unique
  description       String
  initialBalance    Float           @default(0.00)
  createdAt         DateTime        @default(now())
  comment           String?
  isActive          Boolean         @default(true)
  normalSide        String          
  totalDebits       Float           @default(0.00)
  totalCredits      Float           @default(0.00)
  balance           Float           @default(0.00)



  // Foreign Keys
  categoryId        Int
  subcategoryId     Int
  statementId       Int
  userId            Int
  orderId           Int          // Order of the account (e.g., "01" for cash)

  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category          Category        @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory     @relation(fields: [subcategoryId], references: [id])
  statement         Statement       @relation(fields: [statementId], references: [id])
  order             Order           @relation(fields: [orderId], references: [id])  
  transactions      Transaction[]   // Single-entry transactions

  @@map("accounts")
}

/*

Account Types:

These are the high-level categories in the Chart of Accounts (COA), such as:
Assets (e.g., Cash, Accounts Receivable)
Liabilities (e.g., Accounts Payable, Loans Payable)
Equity (e.g., Owner’s Equity, Retained Earnings)
Revenue (e.g., Sales Revenue, Service Revenue)
Expenses (e.g., Rent Expense, Utilities Expense)

Specific Accounts:

These are the individual accounts within each account type, such as:
Cash (Asset)
Accounts Receivable (Asset)
Accounts Payable (Liability)
Loans Payable (Liability)
Owner’s Equity (Equity)
Retained Earnings (Equity)

order Field:

This field is used to organize accounts in a specific sequence.

It can be account type-specific (e.g., all assets start with "1000") or 
account-specific (e.g., Cash is "01", Accounts Receivable is "02").

Sales Revenue (Revenue)
  */
model Order {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  accounts          Account[]

  @@map("orders")
}

model Category {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  accounts          Account[]

  @@map("categories")
}

model Subcategory {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  categoryId        Int
  accounts          Account[]

  @@map("subcategories")
}

model Statement {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  accounts          Account[]

  @@map("statements")
}

model Transaction {
  id              Int       @id @default(autoincrement())
  date            DateTime  @default(now())
  description     String
  amount          Float     @default(0.00) // Positive value representing the transaction amount
  accountId       Int       // Links to the account
  userId          Int       // User who created the transaction
  balance         Float     @default(0.00) // Balance after the transaction

  // Relationships
  account         Account   @relation(fields: [accountId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model EventLog {
  id          Int      @id @default(autoincrement())
  eventType   String   // "CREATE", "UPDATE", or "DEACTIVATE"
  tableName   String   // Name of the table being modified (e.g., "Account")
  recordId    Int      // ID of the record being modified
  beforeState Json?    // JSON representation of the record before the change
  afterState  Json?    // JSON representation of the record after the change
  userId      Int      // ID of the user who made the change
  createdAt   DateTime @default(now())

  // Relationships
  user        User     @relation(fields: [userId], references: [id])

  @@map("event_logs")
}

model PasswordHistory {
  id           Int   @id @default(autoincrement())
  userId       Int 
  oldPassword  String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

model AccessRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  requestedAt DateTime @default(now())
  status      RequestStatus @default(PENDING)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_requests")
}

model SecurityQuestion {
  id            Int      @id @default(autoincrement())
  question       String   @unique

  userSecurityQuestions     UserSecurityQuestion[]

  @@map("security_questions")
}


model UserSecurityQuestion {
  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    Int
  questionId                Int
  answerHash                String

  securityQuestion          SecurityQuestion    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
  @@map("user_security_questions")
}

model ErrorMessage {
  errorCode      String   @id
  message        String
  httpStatusCode Int

  @@map("error_messages")
}